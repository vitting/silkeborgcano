// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/match.dart';
import 'models/match_round.dart';
import 'models/player.dart';
import 'models/player_match_points.dart';
import 'models/player_tournament_points.dart';
import 'models/tournament.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7853952313064716528),
    name: 'Match',
    lastPropertyId: const obx_int.IdUid(5, 689537460272944787),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2038979443242503570),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4608537456728727125),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2536560865682252263),
        name: 'team1Score',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2058331389596678841),
        name: 'team2Score',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 689537460272944787),
        name: 'matchRoundId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 595333096936084368),
        relationTarget: 'MatchRound',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2971949709124135122),
        name: 'team1',
        targetId: const obx_int.IdUid(3, 7144689319236241690),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 6450749083351035823),
        name: 'team2',
        targetId: const obx_int.IdUid(3, 7144689319236241690),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 510023494987061776),
    name: 'MatchRound',
    lastPropertyId: const obx_int.IdUid(4, 4534686335902098829),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 235274359810279691),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 625348424891722316),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 771337921699309596),
        name: 'tournamentId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4534686335902098829),
        name: 'roundIndex',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 5259103634512065539),
        name: 'players',
        targetId: const obx_int.IdUid(3, 7144689319236241690),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(4, 2175112284059726005),
        name: 'playerMatchPoints',
        targetId: const obx_int.IdUid(4, 6445019999584143467),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'matches',
        srcEntity: 'Match',
        srcField: 'matchRound',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7144689319236241690),
    name: 'Player',
    lastPropertyId: const obx_int.IdUid(6, 7918399742341351486),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6177585139791763665),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3009001137938103625),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2719782186188177941),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 925456599303550932),
        name: 'points',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3479277447088109944),
        name: 'sex',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7918399742341351486),
        name: 'isDeleted',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 3541800960085984618),
        name: 'players',
        targetId: const obx_int.IdUid(3, 7144689319236241690),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6445019999584143467),
    name: 'PlayerMatchPoints',
    lastPropertyId: const obx_int.IdUid(5, 8334972070414656936),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4165650630865233064),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 170437534186977905),
        name: 'playerId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4019594218674609870),
        name: 'points',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7602224695151640704),
        name: 'sittingOver',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8334972070414656936),
        name: 'matchRoundId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 2702153521453821823),
    name: 'PlayerTournamentPoints',
    lastPropertyId: const obx_int.IdUid(4, 1761001462288373992),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5536784370678569781),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4599430349379397065),
        name: 'playerId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7823688490938768097),
        name: 'points',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1761001462288373992),
        name: 'tournamentId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 1315279517998681009),
    name: 'Tournament',
    lastPropertyId: const obx_int.IdUid(6, 1428920506474938990),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6631225560634760366),
        name: 'oid',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5017985141931607117),
        name: 'id',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5663566842750572084),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6129634566045210359),
        name: 'pointPerMatch',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3849545012557512647),
        name: 'tournamentStart',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1428920506474938990),
        name: 'tournamentEnd',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(6, 5316022486401829745),
        name: 'players',
        targetId: const obx_int.IdUid(3, 7144689319236241690),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(7, 6466471474438017516),
        name: 'rounds',
        targetId: const obx_int.IdUid(2, 510023494987061776),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(8, 7909714095864845156),
        name: 'playerTournamentPoints',
        targetId: const obx_int.IdUid(5, 2702153521453821823),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 1315279517998681009),
    lastIndexId: const obx_int.IdUid(1, 595333096936084368),
    lastRelationId: const obx_int.IdUid(8, 7909714095864845156),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Match: obx_int.EntityDefinition<Match>(
      model: _entities[0],
      toOneRelations: (Match object) => [object.matchRound],
      toManyRelations: (Match object) => {
        obx_int.RelInfo<Match>.toMany(1, object.oid): object.team1,
        obx_int.RelInfo<Match>.toMany(2, object.oid): object.team2,
      },
      getId: (Match object) => object.oid,
      setId: (Match object, int id) {
        object.oid = id;
      },
      objectToFB: (Match object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        fbb.startTable(6);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, idOffset);
        fbb.addInt64(2, object.team1Score);
        fbb.addInt64(3, object.team2Score);
        fbb.addInt64(4, object.matchRound.targetId);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final team1ScoreParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final team2ScoreParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = Match(
          oid: oidParam,
          id: idParam,
          team1Score: team1ScoreParam,
          team2Score: team2ScoreParam,
        );
        object.matchRound.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.matchRound.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Match>(
          object.team1,
          store,
          obx_int.RelInfo<Match>.toMany(1, object.oid),
        );
        obx_int.InternalToManyAccess.setRelInfo<Match>(
          object.team2,
          store,
          obx_int.RelInfo<Match>.toMany(2, object.oid),
        );
        return object;
      },
    ),
    MatchRound: obx_int.EntityDefinition<MatchRound>(
      model: _entities[1],
      toOneRelations: (MatchRound object) => [],
      toManyRelations: (MatchRound object) => {
        obx_int.RelInfo<MatchRound>.toMany(3, object.oid): object.players,
        obx_int.RelInfo<MatchRound>.toMany(4, object.oid):
            object.playerMatchPoints,
        obx_int.RelInfo<Match>.toOneBacklink(
          5,
          object.oid,
          (Match srcObject) => srcObject.matchRound,
        ): object.matches,
      },
      getId: (MatchRound object) => object.oid,
      setId: (MatchRound object, int id) {
        object.oid = id;
      },
      objectToFB: (MatchRound object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final tournamentIdOffset = fbb.writeString(object.tournamentId);
        fbb.startTable(5);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, tournamentIdOffset);
        fbb.addInt64(3, object.roundIndex);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final roundIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final tournamentIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = MatchRound(
          oid: oidParam,
          roundIndex: roundIndexParam,
          tournamentId: tournamentIdParam,
          id: idParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<MatchRound>(
          object.players,
          store,
          obx_int.RelInfo<MatchRound>.toMany(3, object.oid),
        );
        obx_int.InternalToManyAccess.setRelInfo<MatchRound>(
          object.playerMatchPoints,
          store,
          obx_int.RelInfo<MatchRound>.toMany(4, object.oid),
        );
        obx_int.InternalToManyAccess.setRelInfo<MatchRound>(
          object.matches,
          store,
          obx_int.RelInfo<Match>.toOneBacklink(
            5,
            object.oid,
            (Match srcObject) => srcObject.matchRound,
          ),
        );
        return object;
      },
    ),
    Player: obx_int.EntityDefinition<Player>(
      model: _entities[2],
      toOneRelations: (Player object) => [],
      toManyRelations: (Player object) => {
        obx_int.RelInfo<Player>.toMany(5, object.oid): object.players,
      },
      getId: (Player object) => object.oid,
      setId: (Player object, int id) {
        object.oid = id;
      },
      objectToFB: (Player object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final nameOffset = fbb.writeString(object.name);
        final sexOffset = fbb.writeString(object.sex);
        fbb.startTable(7);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.points);
        fbb.addOffset(4, sexOffset);
        fbb.addBool(5, object.isDeleted);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final pointsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final sexParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final isDeletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final object = Player(
          oid: oidParam,
          id: idParam,
          name: nameParam,
          points: pointsParam,
          sex: sexParam,
          isDeleted: isDeletedParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Player>(
          object.players,
          store,
          obx_int.RelInfo<Player>.toMany(5, object.oid),
        );
        return object;
      },
    ),
    PlayerMatchPoints: obx_int.EntityDefinition<PlayerMatchPoints>(
      model: _entities[3],
      toOneRelations: (PlayerMatchPoints object) => [],
      toManyRelations: (PlayerMatchPoints object) => {},
      getId: (PlayerMatchPoints object) => object.oid,
      setId: (PlayerMatchPoints object, int id) {
        object.oid = id;
      },
      objectToFB: (PlayerMatchPoints object, fb.Builder fbb) {
        final playerIdOffset = fbb.writeString(object.playerId);
        final matchRoundIdOffset = fbb.writeString(object.matchRoundId);
        fbb.startTable(6);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, playerIdOffset);
        fbb.addInt64(2, object.points);
        fbb.addBool(3, object.sittingOver);
        fbb.addOffset(4, matchRoundIdOffset);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final pointsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final playerIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final matchRoundIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final sittingOverParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final object = PlayerMatchPoints(
          oid: oidParam,
          points: pointsParam,
          playerId: playerIdParam,
          matchRoundId: matchRoundIdParam,
          sittingOver: sittingOverParam,
        );

        return object;
      },
    ),
    PlayerTournamentPoints: obx_int.EntityDefinition<PlayerTournamentPoints>(
      model: _entities[4],
      toOneRelations: (PlayerTournamentPoints object) => [],
      toManyRelations: (PlayerTournamentPoints object) => {},
      getId: (PlayerTournamentPoints object) => object.oid,
      setId: (PlayerTournamentPoints object, int id) {
        object.oid = id;
      },
      objectToFB: (PlayerTournamentPoints object, fb.Builder fbb) {
        final playerIdOffset = fbb.writeString(object.playerId);
        final tournamentIdOffset = fbb.writeString(object.tournamentId);
        fbb.startTable(5);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, playerIdOffset);
        fbb.addInt64(2, object.points);
        fbb.addOffset(3, tournamentIdOffset);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final pointsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final playerIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final tournamentIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = PlayerTournamentPoints(
          oid: oidParam,
          points: pointsParam,
          playerId: playerIdParam,
          tournamentId: tournamentIdParam,
        );

        return object;
      },
    ),
    Tournament: obx_int.EntityDefinition<Tournament>(
      model: _entities[5],
      toOneRelations: (Tournament object) => [],
      toManyRelations: (Tournament object) => {
        obx_int.RelInfo<Tournament>.toMany(6, object.oid): object.players,
        obx_int.RelInfo<Tournament>.toMany(7, object.oid): object.rounds,
        obx_int.RelInfo<Tournament>.toMany(8, object.oid):
            object.playerTournamentPoints,
      },
      getId: (Tournament object) => object.oid,
      setId: (Tournament object, int id) {
        object.oid = id;
      },
      objectToFB: (Tournament object, fb.Builder fbb) {
        final idOffset = fbb.writeString(object.id);
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(7);
        fbb.addInt64(0, object.oid);
        fbb.addOffset(1, idOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.pointPerMatch);
        fbb.addInt64(4, object.tournamentStart);
        fbb.addInt64(5, object.tournamentEnd);
        fbb.finish(fbb.endTable());
        return object.oid;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final oidParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final pointPerMatchParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final tournamentStartParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final tournamentEndParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final object = Tournament(
          oid: oidParam,
          id: idParam,
          name: nameParam,
          pointPerMatch: pointPerMatchParam,
          tournamentStart: tournamentStartParam,
          tournamentEnd: tournamentEndParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Tournament>(
          object.players,
          store,
          obx_int.RelInfo<Tournament>.toMany(6, object.oid),
        );
        obx_int.InternalToManyAccess.setRelInfo<Tournament>(
          object.rounds,
          store,
          obx_int.RelInfo<Tournament>.toMany(7, object.oid),
        );
        obx_int.InternalToManyAccess.setRelInfo<Tournament>(
          object.playerTournamentPoints,
          store,
          obx_int.RelInfo<Tournament>.toMany(8, object.oid),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Match] entity fields to define ObjectBox queries.
class Match_ {
  /// See [Match.oid].
  static final oid = obx.QueryIntegerProperty<Match>(
    _entities[0].properties[0],
  );

  /// See [Match.id].
  static final id = obx.QueryStringProperty<Match>(_entities[0].properties[1]);

  /// See [Match.team1Score].
  static final team1Score = obx.QueryIntegerProperty<Match>(
    _entities[0].properties[2],
  );

  /// See [Match.team2Score].
  static final team2Score = obx.QueryIntegerProperty<Match>(
    _entities[0].properties[3],
  );

  /// See [Match.matchRound].
  static final matchRound = obx.QueryRelationToOne<Match, MatchRound>(
    _entities[0].properties[4],
  );

  /// see [Match.team1]
  static final team1 = obx.QueryRelationToMany<Match, Player>(
    _entities[0].relations[0],
  );

  /// see [Match.team2]
  static final team2 = obx.QueryRelationToMany<Match, Player>(
    _entities[0].relations[1],
  );
}

/// [MatchRound] entity fields to define ObjectBox queries.
class MatchRound_ {
  /// See [MatchRound.oid].
  static final oid = obx.QueryIntegerProperty<MatchRound>(
    _entities[1].properties[0],
  );

  /// See [MatchRound.id].
  static final id = obx.QueryStringProperty<MatchRound>(
    _entities[1].properties[1],
  );

  /// See [MatchRound.tournamentId].
  static final tournamentId = obx.QueryStringProperty<MatchRound>(
    _entities[1].properties[2],
  );

  /// See [MatchRound.roundIndex].
  static final roundIndex = obx.QueryIntegerProperty<MatchRound>(
    _entities[1].properties[3],
  );

  /// see [MatchRound.players]
  static final players = obx.QueryRelationToMany<MatchRound, Player>(
    _entities[1].relations[0],
  );

  /// see [MatchRound.playerMatchPoints]
  static final playerMatchPoints =
      obx.QueryRelationToMany<MatchRound, PlayerMatchPoints>(
        _entities[1].relations[1],
      );

  /// see [MatchRound.matches]
  static final matches = obx.QueryBacklinkToMany<Match, MatchRound>(
    Match_.matchRound,
  );
}

/// [Player] entity fields to define ObjectBox queries.
class Player_ {
  /// See [Player.oid].
  static final oid = obx.QueryIntegerProperty<Player>(
    _entities[2].properties[0],
  );

  /// See [Player.id].
  static final id = obx.QueryStringProperty<Player>(_entities[2].properties[1]);

  /// See [Player.name].
  static final name = obx.QueryStringProperty<Player>(
    _entities[2].properties[2],
  );

  /// See [Player.points].
  static final points = obx.QueryIntegerProperty<Player>(
    _entities[2].properties[3],
  );

  /// See [Player.sex].
  static final sex = obx.QueryStringProperty<Player>(
    _entities[2].properties[4],
  );

  /// See [Player.isDeleted].
  static final isDeleted = obx.QueryBooleanProperty<Player>(
    _entities[2].properties[5],
  );

  /// see [Player.players]
  static final players = obx.QueryRelationToMany<Player, Player>(
    _entities[2].relations[0],
  );
}

/// [PlayerMatchPoints] entity fields to define ObjectBox queries.
class PlayerMatchPoints_ {
  /// See [PlayerMatchPoints.oid].
  static final oid = obx.QueryIntegerProperty<PlayerMatchPoints>(
    _entities[3].properties[0],
  );

  /// See [PlayerMatchPoints.playerId].
  static final playerId = obx.QueryStringProperty<PlayerMatchPoints>(
    _entities[3].properties[1],
  );

  /// See [PlayerMatchPoints.points].
  static final points = obx.QueryIntegerProperty<PlayerMatchPoints>(
    _entities[3].properties[2],
  );

  /// See [PlayerMatchPoints.sittingOver].
  static final sittingOver = obx.QueryBooleanProperty<PlayerMatchPoints>(
    _entities[3].properties[3],
  );

  /// See [PlayerMatchPoints.matchRoundId].
  static final matchRoundId = obx.QueryStringProperty<PlayerMatchPoints>(
    _entities[3].properties[4],
  );
}

/// [PlayerTournamentPoints] entity fields to define ObjectBox queries.
class PlayerTournamentPoints_ {
  /// See [PlayerTournamentPoints.oid].
  static final oid = obx.QueryIntegerProperty<PlayerTournamentPoints>(
    _entities[4].properties[0],
  );

  /// See [PlayerTournamentPoints.playerId].
  static final playerId = obx.QueryStringProperty<PlayerTournamentPoints>(
    _entities[4].properties[1],
  );

  /// See [PlayerTournamentPoints.points].
  static final points = obx.QueryIntegerProperty<PlayerTournamentPoints>(
    _entities[4].properties[2],
  );

  /// See [PlayerTournamentPoints.tournamentId].
  static final tournamentId = obx.QueryStringProperty<PlayerTournamentPoints>(
    _entities[4].properties[3],
  );
}

/// [Tournament] entity fields to define ObjectBox queries.
class Tournament_ {
  /// See [Tournament.oid].
  static final oid = obx.QueryIntegerProperty<Tournament>(
    _entities[5].properties[0],
  );

  /// See [Tournament.id].
  static final id = obx.QueryStringProperty<Tournament>(
    _entities[5].properties[1],
  );

  /// See [Tournament.name].
  static final name = obx.QueryStringProperty<Tournament>(
    _entities[5].properties[2],
  );

  /// See [Tournament.pointPerMatch].
  static final pointPerMatch = obx.QueryIntegerProperty<Tournament>(
    _entities[5].properties[3],
  );

  /// See [Tournament.tournamentStart].
  static final tournamentStart = obx.QueryIntegerProperty<Tournament>(
    _entities[5].properties[4],
  );

  /// See [Tournament.tournamentEnd].
  static final tournamentEnd = obx.QueryIntegerProperty<Tournament>(
    _entities[5].properties[5],
  );

  /// see [Tournament.players]
  static final players = obx.QueryRelationToMany<Tournament, Player>(
    _entities[5].relations[0],
  );

  /// see [Tournament.rounds]
  static final rounds = obx.QueryRelationToMany<Tournament, MatchRound>(
    _entities[5].relations[1],
  );

  /// see [Tournament.playerTournamentPoints]
  static final playerTournamentPoints =
      obx.QueryRelationToMany<Tournament, PlayerTournamentPoints>(
        _entities[5].relations[2],
      );
}
